/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Logic2Assigned,
  Logic2AssignedInterface,
} from "../../ProxyAssigned.sol/Logic2Assigned";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
    ],
    name: "changeX",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tripleX",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b50610195806100246000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638b9097581461003b5780639435337e14610045575b600080fd5b610043610061565b005b61005f600480360381019061005a91906100c1565b61007c565b005b6003600080828254610073919061011d565b92505081905550565b8060008190555050565b600080fd5b6000819050919050565b61009e8161008b565b81146100a957600080fd5b50565b6000813590506100bb81610095565b92915050565b6000602082840312156100d7576100d6610086565b5b60006100e5848285016100ac565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101288261008b565b91506101338361008b565b92508282026101418161008b565b91508282048414831517610158576101576100ee565b5b509291505056fea26469706673582212200e3ddc42eb32b4f1e34a1a1efaf65e82f3e351fc927e5c6ce8ff932654c106c464736f6c63430008110033";

type Logic2AssignedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Logic2AssignedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Logic2Assigned__factory extends ContractFactory {
  constructor(...args: Logic2AssignedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Logic2Assigned> {
    return super.deploy(overrides || {}) as Promise<Logic2Assigned>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Logic2Assigned {
    return super.attach(address) as Logic2Assigned;
  }
  override connect(signer: Signer): Logic2Assigned__factory {
    return super.connect(signer) as Logic2Assigned__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Logic2AssignedInterface {
    return new utils.Interface(_abi) as Logic2AssignedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Logic2Assigned {
    return new Contract(address, _abi, signerOrProvider) as Logic2Assigned;
  }
}
