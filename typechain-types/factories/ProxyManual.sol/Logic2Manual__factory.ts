/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Logic2Manual,
  Logic2ManualInterface,
} from "../../ProxyManual.sol/Logic2Manual";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
    ],
    name: "changeX",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tripleX",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b50610385806100246000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638b9097581461003b5780639435337e14610045575b600080fd5b610043610061565b005b61005f600480360381019061005a91906101ff565b6100ba565b005b61009f6040518060400160405280600481526020017f4845524500000000000000000000000000000000000000000000000000000000815250610102565b60036000808282546100b1919061025b565b92505081905550565b806000819055506100ff6040518060400160405280600e81526020017f48455245206f6e204348414e4745000000000000000000000000000000000000815250610102565b50565b61019881604051602401610116919061032d565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061019b565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b6000819050919050565b6101dc816101c9565b81146101e757600080fd5b50565b6000813590506101f9816101d3565b92915050565b600060208284031215610215576102146101c4565b5b6000610223848285016101ea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610266826101c9565b9150610271836101c9565b925082820261027f816101c9565b915082820484148315176102965761029561022c565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102d75780820151818401526020810190506102bc565b60008484015250505050565b6000601f19601f8301169050919050565b60006102ff8261029d565b61030981856102a8565b93506103198185602086016102b9565b610322816102e3565b840191505092915050565b6000602082019050818103600083015261034781846102f4565b90509291505056fea26469706673582212208248a412052a6c5380b651c89e6ef3023d5020a4bf1a36a5a88ff58dbf6c655964736f6c63430008110033";

type Logic2ManualConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Logic2ManualConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Logic2Manual__factory extends ContractFactory {
  constructor(...args: Logic2ManualConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Logic2Manual> {
    return super.deploy(overrides || {}) as Promise<Logic2Manual>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Logic2Manual {
    return super.attach(address) as Logic2Manual;
  }
  override connect(signer: Signer): Logic2Manual__factory {
    return super.connect(signer) as Logic2Manual__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Logic2ManualInterface {
    return new utils.Interface(_abi) as Logic2ManualInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Logic2Manual {
    return new Contract(address, _abi, signerOrProvider) as Logic2Manual;
  }
}
